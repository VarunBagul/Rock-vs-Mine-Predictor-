# -*- coding: utf-8 -*-
"""Rock Vs Mine Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jex8kAaag0Su3cOO0ueA3eksUjQh-Llj

importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Data Processing"""

#loading the dataset to a pandas dataframe
sonar_data= pd.read_csv('/content/Copy of sonar data.csv',header=None)

sonar_data.head()

#no of rows and columns
sonar_data.shape

sonar_data.describe()#describe gives statistical measures of the data

#how many rock and mine examples as rock and mine in 60th col and value_counts
sonar_data[60].value_counts()

"""M--mine R--Rock more data more accuracy"""

#from above thing we can see that data is not biased so accuracy can be achieved here
sonar_data.groupby(60).mean()

#separate data and label last col is labels r and m used for supervised learning model
X=sonar_data.drop(columns=60,axis=1)#if drop col axis =1 if drop row axis=0 here we are storing all data in x expect 60th col
Y=sonar_data[60]

print(X)
print(Y)

"""Training and test data"""

#use train_test_split function here test size=0.1 that is 90train:10test, stratify(we need to have equal r and m in train data),random_state order split in a order 
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.1,stratify=Y)

print(X.shape,X_train.shape,X_test.shape)

print(X_train)
print(Y_train)

"""Model Training -Logistic Regression"""

model=LogisticRegression()

#training the logistic regression model with training data
model.fit(X_train,Y_train)

"""Evaluate Model (accuracy)"""

#accuracy on training data
#model has seen train data but dont know test data now new problem is given to model to test x train pred is our ans(producted) and y train is what we are expecting
X_train_prediction=model.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prediction,Y_train)

print("Accuracy on training data:",training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print("Accuracy on test data:",test_data_accuracy)

"""Now make a predictive system"""

input_data=(0.0298,0.0615,0.0650,0.0921,0.1615,0.2294,0.2176,0.2033,0.1459,0.0852,0.2476,0.3645,0.2777,0.2826,0.3237,0.4335,0.5638,0.4555,0.4348,0.6433,0.3932,0.1989,0.3540,0.9165,0.9371,0.4620,0.2771,0.6613,0.8028,0.4200,0.5192,0.6962,0.5792,0.8889,0.7863,0.7133,0.7615,0.4401,0.3009,0.3163,0.2809,0.2898,0.0526,0.1867,0.1553,0.1633,0.1252,0.0748,0.0452,0.0064,0.0154,0.0031,0.0153,0.0071,0.0212,0.0076,0.0152,0.0049,0.0200,0.0073)
#changing the input_data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshaping the np array as we are predicting for 1 instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)# 1 instance and predict for it
prediction=model.predict(input_data_reshaped)#return R or M value
print(prediction)

if(prediction[0]=='R'):
  print("The object is the rock")
else:
  print("The object is Mine")

